Completed tasks:
- New name: draw
- Switch to 2018 edition
- Make it a public github repo
  - Document how to add as dependency (with or without version info)
- Rename Surface to Canvas (avoids conflict with glium)
- Remove dependent crates unless absolutely required
- Create a Indexable2D trait which applies to [i32;2], [u32;2], usize, etc.
  - Method: try_as_index(&self, img: &Image) -> Option<usize>
  - Method: is_valid(&self, img: &Image) -> bool { self.try_as_index(img).is_some() }
  - Method: as_index(&self, img: &Image) -> usize { self.try_as_index(img).expect() }
  - Method: as_canvas_index? Might need this...
- Hide non-standard errors
- Handle byte order concerns
- Implement proper String parsing
- Remove f64 values (f32 is enough to capture everything)
- Add srgb_to_linear_f32 method
- Complete Glium documentation using srgb texture
- Do not require blend mode - always use highest quality unless otherwise specified
- Prefer arrays to tuples / single values
- Remove _line_advance_height from canvas.rs
- Fix any incorrect documentation in README.md
- Sub-image: Add a builder from the image struct itself

Improvements for drawing crate:
- Add HSV/HSL support
    - https://codeitdown.com/hsl-hsb-hsv-color/
    - Probably want both HSL and HSV/HSB
        - HSL: Lightness 0 is always black, lightness 1 is always white
        - HSV: Value 0 is always black, value 1 is full-strength color if saturation is 1
    - HSV/HSL should use floating point, they are not stored values, but rather used to generate RGB values
- Include alpha-fix feature (set color for pixels where alpha=0) to improve OpenGL blending
- Include a default font (something like Carlito which is small in size: https://fontlibrary.org/en/font/carlito)


=================== RGB to HSL ===================
https://stackoverflow.com/questions/12380682/how-to-convert-rgb-to-hsl-in-c

=================== RGB to HSV ===================
https://stackoverflow.com/questions/3018313/algorithm-to-convert-rgb-to-hsv-and-hsv-to-rgb-in-range-0-255-for-both

typedef struct {
    double r;       // a fraction between 0 and 1
    double g;       // a fraction between 0 and 1
    double b;       // a fraction between 0 and 1
} rgb;

typedef struct {
    double h;       // angle in degrees
    double s;       // a fraction between 0 and 1
    double v;       // a fraction between 0 and 1
} hsv;

static hsv   rgb2hsv(rgb in);
static rgb   hsv2rgb(hsv in);

hsv rgb2hsv(rgb in)
{
    hsv         out;
    double      min, max, delta;

    min = in.r < in.g ? in.r : in.g;
    min = min  < in.b ? min  : in.b;

    max = in.r > in.g ? in.r : in.g;
    max = max  > in.b ? max  : in.b;

    out.v = max;                                // v
    delta = max - min;
    if (delta < 0.00001)
    {
        out.s = 0;
        out.h = 0; // undefined, maybe nan?
        return out;
    }
    if( max > 0.0 ) { // NOTE: if Max is == 0, this divide would cause a crash
        out.s = (delta / max);                  // s
    } else {
        // if max is 0, then r = g = b = 0              
        // s = 0, h is undefined
        out.s = 0.0;
        out.h = NAN;                            // its now undefined
        return out;
    }
    if( in.r >= max )                           // > is bogus, just keeps compilor happy
        out.h = ( in.g - in.b ) / delta;        // between yellow & magenta
    else
    if( in.g >= max )
        out.h = 2.0 + ( in.b - in.r ) / delta;  // between cyan & yellow
    else
        out.h = 4.0 + ( in.r - in.g ) / delta;  // between magenta & cyan

    out.h *= 60.0;                              // degrees

    if( out.h < 0.0 )
        out.h += 360.0;

    return out;
}


rgb hsv2rgb(hsv in)
{
    double      hh, p, q, t, ff;
    long        i;
    rgb         out;

    if(in.s <= 0.0) {       // < is bogus, just shuts up warnings
        out.r = in.v;
        out.g = in.v;
        out.b = in.v;
        return out;
    }
    hh = in.h;
    if(hh >= 360.0) hh = 0.0;
    hh /= 60.0;
    i = (long)hh;
    ff = hh - i;
    p = in.v * (1.0 - in.s);
    q = in.v * (1.0 - (in.s * ff));
    t = in.v * (1.0 - (in.s * (1.0 - ff)));

    switch(i) {
    case 0:
        out.r = in.v;
        out.g = t;
        out.b = p;
        break;
    case 1:
        out.r = q;
        out.g = in.v;
        out.b = p;
        break;
    case 2:
        out.r = p;
        out.g = in.v;
        out.b = t;
        break;

    case 3:
        out.r = p;
        out.g = q;
        out.b = in.v;
        break;
    case 4:
        out.r = t;
        out.g = p;
        out.b = in.v;
        break;
    case 5:
    default:
        out.r = in.v;
        out.g = p;
        out.b = q;
        break;
    }
    return out;     
}
